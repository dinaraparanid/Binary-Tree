var searchIndex = JSON.parse('{\
"binartree":{"doc":"","i":[[0,"iter","binartree","",null,null],[3,"TreeIter","binartree::iter","Realisation of Iterator for Tree…",null,null],[11,"new","","English: Method new() creates empty iterator. Sometimes…",0,[[]]],[11,"len","","English: Method len() returns iterator\'s len",0,[[]]],[0,"tree","binartree","",null,null],[3,"BinaryTree","binartree::tree","Realisation of Binary Search Tree in Rust lang…",null,null],[11,"new","","English: Method new() creates empty tree. You can call it…",1,[[]]],[11,"len","","English: Method len() returns tree\'s length.",1,[[]]],[11,"is_empty","","English: Method is_empty() answers the question: \\\"is out…",1,[[]]],[11,"to_vec","","English: Method to_vec() converts tree to std::vec::Vec",1,[[],["vec",3]]],[11,"to_deque","","English: Method to_deque() converts tree to…",1,[[],["vecdeque",3]]],[11,"insert","","English: Method insert() adds value to tree. Value takes…",1,[[]]],[11,"contains","","English: Method contains() checks that value is in the…",1,[[]]],[11,"first","","English: Method first() returns minimum value in the tree.…",1,[[]]],[11,"last","","English: Method last() returns maximum value in the tree.…",1,[[]]],[11,"iter","","English: Method iter() converts tree to iterator, which…",1,[[],["treeiter",3]]],[11,"append","","English: Method apend() translates all elements from 2-nd…",1,[[["binarytree",3]]]],[11,"clear","","English: Method celan() makes tree empty.",1,[[]]],[11,"remove","","English: Removing element from tree. Keys, that are in…",1,[[]]],[11,"difference","","English: Method difference() returns TreeIter, which…",1,[[["binarytree",3]],["treeiter",3]]],[11,"drain_filter","","English: Method drain_filter() stoles all values from…",1,[[["fnmut",8]],["treeiter",3]]],[11,"intersection","","English: Method intersection() returns TreeIter, which…",1,[[["binarytree",3]],["treeiter",3]]],[11,"is_disjoint","","English: Method is_disjoint() answers the question \\\"Are…",1,[[["binarytree",3]]]],[11,"pop_first","","English: Method pop_frist removes min value from tree. If…",1,[[]]],[11,"pop_last","","English: Method pop_last() removes min element from tree.…",1,[[]]],[11,"replace_val","","English: Method replace_val() changes all keys with some…",1,[[]]],[11,"symmetric_difference","","English: Method symmetric_difference() returns TreeIter…",1,[[["binarytree",3]],["treeiter",3]]],[11,"multi_remove","","English: You should use method multi_remove() when you…",1,[[["vec",3]]]],[11,"from","binartree::iter","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","binartree::tree","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"extend","binartree::iter","English: Method extend() moves value to tree",0,[[["intoiterator",8]]]],[11,"extend","binartree::tree","English: Method extend() stoles keys from value. It takes…",1,[[["intoiterator",8]]]],[11,"into_iter","","English: Method into_iter() converts tree to TreeIter",1,[[],["treeiter",3]]],[11,"next","binartree::iter","English: Method next() allows to walk in iterator…",0,[[],["option",4]]],[11,"clone","","",0,[[],["treeiter",3]]],[11,"clone","binartree::tree","",1,[[],["binarytree",3]]],[11,"default","binartree::iter","Russian: Создаём пустой итератор",0,[[]]],[11,"default","binartree::tree","",1,[[]]],[11,"eq","binartree::iter","",0,[[["treeiter",3]]]],[11,"ne","","",0,[[["treeiter",3]]]],[11,"eq","binartree::tree","",1,[[["binarytree",3]]]],[11,"ne","","",1,[[["binarytree",3]]]],[11,"fmt","binartree::iter","",0,[[["formatter",3]],["result",6]]],[11,"fmt","binartree::tree","",1,[[["formatter",3]],["result",6]]],[11,"from_iter","binartree::iter","English: construct TreeIter from another iterator",0,[[["intoiterator",8]]]],[11,"from_iter","binartree::tree","",1,[[["intoiterator",8]]]]],"p":[[3,"TreeIter"],[3,"BinaryTree"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);